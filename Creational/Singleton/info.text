---- Singleton

--definition:
"is a creational design pattern that lets you ensure that a class has only one instance,
 while providing a global access point to this instance."


-- Examples
- database class


-- Pros and Cons
--- Props
1- You can be sure that a class has only a single instance.
2- You gain a global access point to that instance.
3- The singleton object is initialized only when itâ€™s requested for the first time.
4-  You get an alternative to inheritance when dealing with configuration presets for complex objects.
--- Cons
1- Violates the Single Responsibility Principle. The pattern solves two problems at the time.
2- The Singleton pattern can mask bad design, for instance, when the components of the program know too much about each other.
3-  It may be difficult to unit test the client code of the Singleton


-- When Use It
1- when a class in your program should have just a single instance available to all clients; for example, a single database object shared by
 different parts of the program.
2- when you need stricter control over global variables.