---- Prototype
     Also known as ' Clone ' :

--definition:
"is a creational design pattern that lets you copy existing objects
without making your code dependent on their classes."


-- Examples
- we are building a web application that allows users to create customized pizza orders.
  Instead of creating each order from scratch every time,
  we can use the Prototype pattern to create clones of existing pizza orders.


-- Pros and Cons
--- Props
1-  You can clone objects without coupling to their concrete classes.
2-  You can get rid of repeated initialization code in favor of cloning pre-built prototypes.
3-  You can produce complex objects more conveniently.
4-  You get an alternative to inheritance when dealing with configuration presets for complex objects.
--- Cons
1- Cloning complex objects that have circular references might be very tricky.


-- When Use It
1- when your code shouldnâ€™t depend on the concrete classes of objects that you need to copy.
2- when you want to reduce the number of subclasses that only differ in the way they initialize their respective objects.
3- when you need make an instance for class but without knowing parameters of construct
pre:
The Prototype design pattern is useful when you want to create new objects by cloning existing ones rather than
 instantiating them from scratch. This can save time and resources,
 especially when creating complex objects that require a lot of setup.

Difference Between
Shallow Copy - Deep Copy
Shallow copy is a method of copying where only the reference values of the objects are copied, without copying the actual content of the object. In other words, a new variable is created that points to the same location as the original variable, so any changes made to the new variable will affect the original variable.
On the other hand.

deep copy is a method of copying where the values contained in the objects are fully copied, including any reference objects. In other words, a new variable is created that contains an independent copy of all the objects present in the original variable, so any changes made to the new variable will not affect the original variable.
In general, shallow copy is used when a certain value needs to be passed to a function such that the copied value can be modified by the function, whereas deep copy is used when it is necessary to create an independent copy of the original object without affecting the original copy.

-- shallow  ( if exists  any reference shallow will related to this reference )  -> default for PHP
-- Deep     ( New Object With New Reference )