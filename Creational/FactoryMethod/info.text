---- Factory Method  :

--definition:
"is a creational design pattern that provides an interface for creating objects in a superclass,
 but allows subclasses to alter the type of objects that will be created."

-- Examples
1- Create Car Brand
2- logistics management application. [ create Truck and Ship Class Transportation )

-- Pros and Cons
--- Props
1- You avoid tight coupling between the creator and the concrete products.
2- Single Responsibility Principle.
3- Open/Closed Principle
--- Cons
1-The code may become more complicated since you need to introduce a lot of new subclasses to implement the pattern. The best case scenario is when you’re introducing the pattern into an existing hierarchy of creator classes.

-- When Use It
1- when you don’t know beforehand the exact types and dependencies of the objects your code should work with.
 -For example, to add a new product type to the app, you’ll only need to create a new creator subclass and override the factory method in it.
2- provide users of your library or framework with a way to extend its internal components.
3- when you want to save system resources by reusing existing objects instead of rebuilding them each time.
